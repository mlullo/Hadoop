import java.io.*;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.util.*;
import org.apache.hadoop.mapred.lib.*;

// this is the outermost class name
public class Li_Lullo_Martin_exercise3v2 extends Configured implements Tool {

	// inner map class 
	public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {
		// these would be keys & values but you don't need them for this problem		
		private Text fields = new Text();
		private final Text dummyValue = new Text(" ");

		public void configure(JobConf job) {

		}
		// this is the map function
		public void map(LongWritable key, Text inputLine, OutputCollector<Text, Text> output, Reporter reporter) throws IOException {
		        // this takes a line of input and makes it a string		
			String line = value.toString();
                        // splits the inputs on the commas
			String[] splits = line.split(",");

			// want to take the years b/tw 2000-2010 (field 165) and collect and output 
			// artist name, duration and song title.
			String song = split[0].trim[];
			String artist = split[1].trim[];
			String duration = split[2].trim[];		 

	    	//for(int i = 5; i <166; i++)
	        //   		tokenizer.nextToken();

	    	//int year = Integer.parseInt(tokenizer.nextToken());

	    	//if(year >=2000 && year <=2010) 

		if (splits[splits[155:165]{
	    		fields.set(artist+" "+duration+" "+title);
		output.collect(fields, dummyValue);
	    	}
		}
	}	

	

	public int run(String[] args) throws Exception{
		JobConf conf = new JobConf(getConf(), Li_Lullo_Martin_exercise3.class);
		conf.setJobName("hw2ex3v2");

		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(Text.class);

		conf.setMapperClass(Map.class);
		conf.setNumReduceTasks(0);
		// conf.setCombinerClass(Reduce.class);
		// conf.setReducerClass(Reduce.class);

		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);

		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));

		JobClient.runJob(conf);
		return 0;
	}	

	public static void main(String[] args) throws Exception{
		int res = ToolRunner.run(new Configuration(), new Li_Lullo_Martin_exercise3v2(), args);
		System.exit(res);
	}
} 
